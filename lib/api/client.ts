import axios from "axios";
import Cookies from "js-cookie";
import { jwtDecode } from "jwt-decode";

// Configura√ß√£o din√¢mica da baseURL
const getBaseURL = () => {
  if (typeof window !== "undefined") {
    // Se estamos no cliente, usar o hostname atual
    const hostname = window.location.hostname;
    console.log('üåê Cliente detectado - hostname:', hostname);
    
    if (hostname === "localhost" || hostname === "127.0.0.1") {
      console.log('üè† Usando localhost:4000');
      return "http://localhost:4000";
    } else {
      // Para rede local, usar o IP do servidor
      console.log('üåê Usando rede local: 10.10.10.39:4000');
      return "http://10.10.10.39:4000";
    }
  }
  // Fallback para servidor (SSR)
  const fallbackUrl = process.env.NEXT_PUBLIC_API_URL || "http://localhost:4000";
  console.log('‚öôÔ∏è SSR - usando fallback:', fallbackUrl);
  return fallbackUrl;
};

// Configura√ß√£o de cookies com dom√≠nio correto
const getCookieOptions = () => {
  if (typeof window !== "undefined") {
    const hostname = window.location.hostname;
    
    // Para localhost
    if (hostname === "localhost" || hostname === "127.0.0.1") {
      return {
        secure: false,
        sameSite: 'lax' as const,
        expires: 7,
        path: "/"
      };
    }
    
    // Para rede local (IP) - configura√ß√µes mais permissivas
    return {
      secure: false,
      sameSite: 'lax' as const,
      expires: 7,
      path: "/",
      // Para IPs, n√£o definir domain e usar configura√ß√µes mais permissivas
    };
  }
  
  return {
    secure: false,
    sameSite: 'lax' as const,
    expires: 7,
    path: "/"
  };
};

const api = axios.create({
  baseURL: getBaseURL(),
  timeout: 600000,
  headers: {
    "Content-Type": "application/json",
  },
});

// Fun√ß√£o auxiliar para ler token de forma mais robusta
export const getToken = (): string | null => {
  if (typeof window === "undefined") return null;
  
  // Tentar primeiro com js-cookie
  let token = Cookies.get("jwtToken");
  
  // Se n√£o encontrou, tentar via document.cookie diretamente
  if (!token) {
    token = getTokenFromDocument();
  }
  
  // Se ainda n√£o encontrou e estamos em rede local, tentar localStorage como fallback
  if (!token && window.location.hostname !== "localhost" && window.location.hostname !== "127.0.0.1") {
    console.log('üîÑ Token n√£o encontrado em cookies, tentando localStorage...');
    token = localStorage.getItem("jwtToken");
    if (token) {
      console.log('‚úÖ Token encontrado no localStorage!');
    }
  }
  
  return token || null;
};

// Fun√ß√£o para salvar no localStorage como fallback
const saveTokenToLocalStorage = (token: string) => {
  try {
    localStorage.setItem("jwtToken", token);
    console.log('üíæ Token salvo no localStorage como fallback');
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao salvar no localStorage:', error);
    return false;
  }
};

api.interceptors.request.use((config) => {
  const token = getToken(); // Usar a fun√ß√£o robusta
  console.log('üîê Token encontrado:', token ? `${token.substring(0, 20)}...` : 'NENHUM');
  console.log('üéØ URL da requisi√ß√£o:', config.url);
  console.log('üåê Base URL:', config.baseURL);
  
  if (token) {
    if (!config.headers) {
      config.headers = {} as import("axios").AxiosRequestHeaders;
    }
    config.headers["Authorization"] = `Bearer ${token}`;
    console.log('‚úÖ Authorization header adicionado');
  } else {
    console.log('‚ùå Nenhum token encontrado nos cookies');
  }
  
  return config;
});

api.interceptors.response.use(
  (response) => {
    return response;
  },
  (error) => {
    if (error.response?.status === 401 || error.response?.status === 403) {
      if (typeof window !== "undefined") {
        // Remover cookie com as mesmas op√ß√µes que foi criado
        const options = getCookieOptions();
        Cookies.remove("jwtToken", options);
        // Tamb√©m tentar remover sem op√ß√µes como fallback
        Cookies.remove("jwtToken");

        if (!window.location.pathname.includes("/login")) {
          window.location.href = "/login";
        }
      }
    }
    return Promise.reject(error);
  }
);

export const getDecodedToken = () => {
  const token = Cookies.get("jwtToken");
  if (token) {
    try {
      return jwtDecode(token);
    } catch (error) {
      console.error("Erro ao decodificar o token JWT:", error);
      return null;
    }
  }
  return null;
};

// Fun√ß√£o para salvar token com configura√ß√µes corretas
export const saveToken = (token: string) => {
  console.log('üíæ Salvando token...');
  console.log('üåê Hostname atual:', typeof window !== "undefined" ? window.location.hostname : 'SSR');
  
  if (typeof window === "undefined") return;
  
  const hostname = window.location.hostname;
  
  // Para rede local (IP), usar m√©todo manual mais confi√°vel
  if (hostname !== "localhost" && hostname !== "127.0.0.1") {
    console.log('üåê Detectado rede local, usando m√©todo manual de cookie');
    
    // M√©todo manual mais confi√°vel para rede local
    const expires = new Date();
    expires.setDate(expires.getDate() + 7); // 7 dias
    
    // Primeiro tentar com SameSite=None para contornar restri√ß√µes
    let cookieString = `jwtToken=${token}; expires=${expires.toUTCString()}; path=/; SameSite=None`;
    document.cookie = cookieString;
    console.log('üìù Cookie string (SameSite=None):', cookieString);
    
    // Verificar se foi salvo
    let savedToken = getTokenFromDocument();
    console.log('‚úÖ Primeira verifica√ß√£o (SameSite=None):', savedToken ? `${savedToken.substring(0, 20)}...` : 'FALHOU');
    
    // Se n√£o funcionou, tentar sem SameSite
    if (!savedToken) {
      console.log('‚ö†Ô∏è SameSite=None falhou, tentando sem SameSite...');
      cookieString = `jwtToken=${token}; expires=${expires.toUTCString()}; path=/`;
      document.cookie = cookieString;
      console.log('üìù Cookie string (sem SameSite):', cookieString);
      
      savedToken = getTokenFromDocument();
      console.log('‚úÖ Segunda verifica√ß√£o (sem SameSite):', savedToken ? `${savedToken.substring(0, 20)}...` : 'FALHOU');
    }
    
    // Se ainda n√£o funcionou, tentar m√©todo mais agressivo
    if (!savedToken) {
      console.log('‚ö†Ô∏è M√©todos anteriores falharam, tentando m√©todo mais agressivo...');
      
      // Tentar diferentes combina√ß√µes
      const attempts = [
        `jwtToken=${token}; path=/; domain=${hostname}`,
        `jwtToken=${token}; path=/`,
        `jwtToken=${token}`,
        `jwtToken=${encodeURIComponent(token)}; path=/`
      ];
      
      for (let i = 0; i < attempts.length; i++) {
        document.cookie = attempts[i];
        console.log(`ÔøΩ Tentativa ${i + 1}:`, attempts[i]);
        
        const testToken = getTokenFromDocument();
        if (testToken) {
          console.log(`‚úÖ Sucesso na tentativa ${i + 1}!`);
          break;
        }
      }
    }
    
  } else {
    // Para localhost, usar js-cookie normalmente
    Cookies.set("jwtToken", token, {
      expires: 7,
      path: "/",
      secure: false,
      sameSite: 'lax'
    });
  }
  
  // Verifica√ß√£o final
  const finalToken = getToken();
  console.log('üèÅ Verifica√ß√£o final:', finalToken ? `${finalToken.substring(0, 20)}...` : 'FALHOU');
  
  // Se ainda falhou com cookies, tentar localStorage como √∫ltimo recurso
  if (!finalToken && hostname !== "localhost" && hostname !== "127.0.0.1") {
    console.log('üÜò Cookies falharam completamente, usando localStorage como √∫ltimo recurso...');
    saveTokenToLocalStorage(token);
    
    const localStorageToken = getToken();
    console.log('üèÅ Verifica√ß√£o final com localStorage:', localStorageToken ? `${localStorageToken.substring(0, 20)}...` : 'FALHOU COMPLETAMENTE');
  }
  
  // Se ainda falhou, mostrar informa√ß√µes de debug do navegador
  if (!getToken()) {
    console.log('üîç Debug do navegador:');
    console.log('- User Agent:', navigator.userAgent);
    console.log('- Protocol:', window.location.protocol);
    console.log('- √â HTTPS?:', window.location.protocol === 'https:');
    console.log('- Cookies habilitados?:', navigator.cookieEnabled);
    console.log('- LocalStorage dispon√≠vel?:', typeof Storage !== "undefined");
  }
};

// Fun√ß√£o auxiliar para ler token diretamente do document.cookie
const getTokenFromDocument = (): string | null => {
  if (typeof window === "undefined") return null;
  
  const allCookies = document.cookie;
  const tokenMatch = allCookies.match(/jwtToken=([^;]+)/);
  return tokenMatch ? decodeURIComponent(tokenMatch[1]) : null;
};

// Fun√ß√£o para remover token
export const removeToken = () => {
  console.log('üóëÔ∏è Removendo token...');
  
  // Tentar m√∫ltiplas formas de remover o cookie
  Cookies.remove("jwtToken");
  Cookies.remove("jwtToken", { path: "/" });
  
  if (typeof window !== "undefined") {
    // M√©todo adicional para limpar cookie via document.cookie
    document.cookie = "jwtToken=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";
    
    // Limpar localStorage tamb√©m
    try {
      localStorage.removeItem("jwtToken");
      console.log('üóëÔ∏è Token removido do localStorage');
    } catch (error) {
      console.error('‚ùå Erro ao remover do localStorage:', error);
    }
  }
  
  // Verificar se foi removido
  const remainingToken = getToken();
  console.log('üóëÔ∏è Token removido:', remainingToken ? 'FALHOU' : 'SUCESSO');
};

// Fun√ß√£o de debug para verificar cookies
export const debugCookies = () => {
  console.log('üç™ Debug de Cookies:');
  
  const robustToken = getToken();
  const jsToken = Cookies.get("jwtToken");
  
  console.log('- jwtToken (js-cookie):', jsToken ? `${jsToken.substring(0, 20)}...` : 'NENHUM');
  console.log('- jwtToken (robusto):', robustToken ? `${robustToken.substring(0, 20)}...` : 'NENHUM');
  console.log('- user:', Cookies.get("user") ? 'PRESENTE' : 'NENHUM');
  console.log('- userId:', Cookies.get("userId") || 'NENHUM');
  console.log('- USER_ROLE:', Cookies.get("USER_ROLE") || 'NENHUM');
  console.log('- Todos os cookies:', document.cookie);
};

export default api;