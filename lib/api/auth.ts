import api from './client';
import { jwtDecode } from 'jwt-decode';
import Cookies from "js-cookie";
import { saveToken, removeToken, getToken } from './client';
import { 
    UserData, 
    LoginResponse, 
    RegisterData, 
    Permission, 
    UserPermissions,
    AddPermissionsRequest,
    AddPermissionsResponse,
    RemovePermissionsRequest,
    RemovePermissionsResponse,
    SetupPermissionsResponse,
    DecodedToken,
    AuthResponse,
    UpdateUserData
} from '../types/auth';

export async function login({ email, password }: { email: string; password: string }): Promise<AuthResponse> {
    try {
        const response = await api.post<LoginResponse>('/auth/login', { email, password });
        console.log("Resposta do servidor:", response);

        const { access_token, user } = response.data;

        if (!access_token || typeof access_token !== 'string') {
            console.error("Token inv√°lido ou ausente:", access_token);
            throw new Error("Token inv√°lido ou ausente");
        }

        // Salvar token e dados do usu√°rio
        console.log("üîÑ Salvando token de acesso...");
        saveToken(access_token);
        
        // Verificar se o token foi salvo corretamente
        const savedToken = Cookies.get("jwtToken");
        console.log("‚úÖ Verifica√ß√£o do token salvo:", savedToken ? `${savedToken.substring(0, 20)}...` : 'FALHOU');
        
        Cookies.set("user", JSON.stringify(user), { expires: 7, secure: false, sameSite: 'lax' });

        // Decodificar token para extrair informa√ß√µes
        const decodedToken = jwtDecode<DecodedToken>(access_token);
        Cookies.set("userId", decodedToken.id, { expires: 7, secure: false, sameSite: 'lax' });

        // Log dos dados salvos para debug
        console.log("=== DADOS SALVOS NO LOGIN ===");
        console.log("Token JWT:", access_token.substring(0, 50) + "...");
        console.log("Dados do usu√°rio salvos no cookie:", user);
        console.log("Token decodificado:", decodedToken);
        
        // Verificar se os dados foram salvos corretamente
        const savedUser = Cookies.get("user");
        if (savedUser) {
            console.log("Verifica√ß√£o - dados do usu√°rio recuperados do cookie:", JSON.parse(savedUser));
        }

        // Salvar role nos cookies
        saveRolesToCookie(user.role, null);
        console.log("Role salvo:", user.role);

        console.log("Usu√°rio logado com sucesso:", response.data);
        console.log("Token decodificado:", decodedToken);
        console.log("Dados do usu√°rio:", user);

        return { success: true, user, token: access_token };
    } catch (error: any) {
        console.error("Erro ao tentar fazer login:", error.response || error);
        const message = error.response?.data?.message || 'Credenciais inv√°lidas';
        return { success: false, message };
    }
}

export async function register(userData: RegisterData): Promise<AuthResponse> {
    try {
        const response = await api.post('/auth/register', userData);
        console.log("Usu√°rio registrado com sucesso:", response.data);
        return { success: true, user: response.data };
    } catch (error: any) {
        if (error.response && error.response.data && error.response.data.message) {
            return { success: false, message: error.response.data.message };
        }
        console.error("Erro ao registrar:", error);
        return { success: false, message: "Ocorreu um erro inesperado. Tente novamente." };
    }
}

export async function logout() {
    try {
        await api.post('/auth/logout');
        clearAuthData();
        console.log("Usu√°rio deslogado com sucesso");
        return { success: true };
    } catch (error: any) {
        console.error("Erro ao fazer logout:", error);
        // Limpar dados mesmo se der erro na API
        clearAuthData();
        return { success: true };
    }
}

// Fun√ß√£o para limpar cache (√∫til no logout)
export const clearUserDataCache = () => {
    userDataCache = null;
    console.log('Cache de dados do usu√°rio limpo');
};

// Fun√ß√£o auxiliar para limpar dados de autentica√ß√£o
const clearAuthData = () => {
    removeToken();
    Cookies.remove("user");
    Cookies.remove("userId");
    Cookies.remove("USER_ROLE");
    clearUserDataCache(); // Limpar cache tamb√©m
};

// Cache para evitar requisi√ß√µes excessivas
let userDataCache: { data: UserData; timestamp: number } | null = null;
const CACHE_DURATION = 5 * 60 * 1000; // 5 minutos em milliseconds

export const getUserData = async (forceRefresh = false): Promise<UserData> => {
    // Verificar cache se n√£o for refresh for√ßado
    if (!forceRefresh && userDataCache) {
        const now = Date.now();
        const cacheAge = now - userDataCache.timestamp;
        
        if (cacheAge < CACHE_DURATION) {
            console.log('‚úÖ Usando dados do cache (v√°lido por mais', Math.round((CACHE_DURATION - cacheAge) / 1000), 'segundos)');
            return userDataCache.data;
        } else {
            console.log('‚è∞ Cache expirado, buscando dados atualizados...');
        }
    }
    
    try {
        console.log('üîÑ Buscando dados do usu√°rio da API /auth/profile...');
        const response = await api.get<UserData>('/auth/profile');
        
        console.log('‚úÖ Dados recebidos da API /auth/profile');
        
        // Atualizar cache
        userDataCache = {
            data: response.data,
            timestamp: Date.now()
        };
        
        // Atualizar dados do usu√°rio no cookie
        Cookies.set("user", JSON.stringify(response.data), { expires: 7, secure: false, sameSite: 'lax' });
        console.log('üíæ Dados atualizados no cookie e cache');
        
        return response.data; 
    } catch (error) {
        console.error('‚ùå Erro ao obter dados do usu√°rio:', error);
        throw error;
    }
};

export const updateUserData = async (userData: UpdateUserData) => {
    try {
        const response = await api.put('/auth/profile', userData);
        
        // Limpar cache para for√ßar nova busca na pr√≥xima vez
        clearUserDataCache();
        
        // Atualizar dados no cookie se a atualiza√ß√£o foi bem-sucedida
        const currentUser = getUserFromToken();
        if (currentUser) {
            const updatedUser = { ...currentUser, ...userData };
            Cookies.set("user", JSON.stringify(updatedUser), { expires: 7, secure: false, sameSite: 'lax' });
        }
        
        return response.data;
    } catch (error) {
        console.error('Erro ao atualizar dados do usu√°rio:', error);
        throw error;
    }
};

export const isAuthenticated = (): boolean => {
    const token = getToken(); // Usar a fun√ß√£o robusta
    console.log('üîç Verificando autentica√ß√£o - Token encontrado:', token ? `${token.substring(0, 20)}...` : 'NENHUM');
    
    if (!token) {
        console.log('‚ùå Nenhum token encontrado');
        return false;
    }
    
    try {
        const decoded = jwtDecode<DecodedToken>(token);
        const currentTime = Date.now() / 1000;
        
        console.log('üïí Token expira em:', new Date(decoded.exp * 1000));
        console.log('üïí Hora atual:', new Date());
        
        if (decoded.exp && decoded.exp < currentTime) {
            console.log('‚è∞ Token expirado, removendo dados de auth');
            clearAuthData();
            return false;
        }
        
        console.log('‚úÖ Token v√°lido');
        return true;
    } catch (error) {
        console.error('‚ùå Erro ao verificar autentica√ß√£o:', error);
        clearAuthData();
        return false;
    }
};

export const getUserFromToken = (): UserData | null => {
    const token = Cookies.get("jwtToken");
    const userCookie = Cookies.get("user");
    
    if (!token) {
        return null;
    }
    
    try {
        // Primeiro tentar obter dados do cookie user (dados mais completos)
        if (userCookie) {
            try {
                const userData = JSON.parse(userCookie) as UserData;
                return userData;
            } catch (error) {
                console.warn('‚ö†Ô∏è Erro ao parsear cookie user:', error);
            }
        }
        
        // Fallback para dados do token (dados m√≠nimos)
        const decodedToken = jwtDecode<DecodedToken>(token);
        
        return {
            id: decodedToken.id,
            email: decodedToken.email,
            name: '', // Nome n√£o est√° no token, precisa buscar da API
            role: decodedToken.role,
            organization: decodedToken.organizationId ? {
                id: decodedToken.organizationId,
                name: '',
                slug: decodedToken.organizationSlug || ''
            } : null
        };
    } catch (error) {
        console.error('‚ùå Erro ao decodificar token:', error);
        return null;
    }
};

export const getFullUserData = async (forceRefresh = false): Promise<UserData | null> => {
    // Primeiro verificar se est√° autenticado
    if (!isAuthenticated()) {
        console.log('‚ùå Usu√°rio n√£o est√° autenticado');
        return null;
    }
    
    // Se n√£o √© refresh for√ßado, verificar se temos dados v√°lidos no cookie
    if (!forceRefresh) {
        const cookieUser = getUserFromToken();
        if (cookieUser && cookieUser.name && cookieUser.organization?.name) {
            console.log('‚úÖ Usando dados v√°lidos do cookie (evitando requisi√ß√£o desnecess√°ria)');
            return cookieUser;
        }
    }
    
    try {
        // Buscar dados da API com cache
        console.log('üîÑ Buscando dados completos do usu√°rio...');
        const apiData = await getUserData(forceRefresh);
        return apiData;
    } catch (error) {
        console.warn('‚ö†Ô∏è Erro ao buscar dados da API, usando dados do cookie/token:', error);
        
        const tokenData = getUserFromToken();
        if (tokenData) {
            // Se temos dados b√°sicos no cookie, usar eles
            if (tokenData.name && tokenData.organization?.name) {
                console.log('‚úÖ Usando dados do cookie como fallback');
                return tokenData;
            }
        }
        
        // Se n√£o temos dados completos, mesmo com erro da API, retorna null
        // para for√ßar novo login
        console.error('‚ùå Dados incompletos e erro na API, for√ßando novo login');
        return null;
    }
};

export const getUserProfile = async (): Promise<UserData> => {
    try {
        console.log('Fazendo requisi√ß√£o para /auth/profile...');
        const response = await api.get<UserData>('/auth/profile');
        console.log('Resposta de /auth/profile:', response.data);
        
        // Salvar role nos cookies
        saveRolesToCookie(response.data.role, null);
        
        return response.data;
    } catch (error) {
        console.error('Erro ao buscar dados do usu√°rio:', error);
        throw error;
    }
};

export const savePermissionsToCookie = (permissions: Permission[]) => {
    // Fun√ß√£o mantida para compatibilidade, mas n√£o usada na nova API
    // O novo sistema de permiss√µes √© consultado diretamente da API
    console.log('Fun√ß√£o savePermissionsToCookie obsoleta na nova API - use getUserPermissions()');
};

export const saveRolesToCookie = (role: string | null, customRole: any | null) => {
    try {
        if (role) {
            Cookies.set("USER_ROLE", role, { expires: 7, secure: false, sameSite: 'lax' });
        }
        console.log('Role salvo no cookie:', { role });
    } catch (error) {
        console.error('Erro ao salvar role no cookie:', error);
    }
};

export const getPermissionsFromCookie = (): Permission[] => {
    // Fun√ß√£o mantida para compatibilidade, mas retorna array vazio
    // O novo sistema de permiss√µes deve usar getUserPermissions() da API
    console.log('Fun√ß√£o getPermissionsFromCookie obsoleta na nova API - use getUserPermissions()');
    return [];
};

export const getRoleFromCookie = (): string | null => {
    return Cookies.get("USER_ROLE") || null;
};

export const getCustomRoleFromCookie = (): any | null => {
    // Fun√ß√£o mantida para compatibilidade, mas n√£o usada na nova API
    console.log('Fun√ß√£o getCustomRoleFromCookie obsoleta na nova API');
    return null;
};

// Fun√ß√£o para verificar se o usu√°rio tem um role espec√≠fico
export const hasRole = (roleName: string): boolean => {
    const userRole = getRoleFromCookie();
    return userRole === roleName;
};

// Fun√ß√£o para verificar se o usu√°rio √© admin (ORG_ADMIN ou SUPER_ADMIN)
export const isAdmin = (): boolean => {
    const userRole = getRoleFromCookie();
    return userRole === 'ORG_ADMIN' || userRole === 'SUPER_ADMIN';
};

// Fun√ß√£o para verificar se o usu√°rio √© super admin
export const isSuperAdmin = (): boolean => {
    const userRole = getRoleFromCookie();
    return userRole === 'SUPER_ADMIN';
};

// Fun√ß√£o para criar usu√°rio (apenas para admins)
export const createUser = async (userData: RegisterData) => {
    try {
        const response = await api.post('/auth/register', userData);
        return response.data;
    } catch (error) {
        console.error('Erro ao criar usu√°rio:', error);
        throw error;
    }
};

// Fun√ß√£o para listar usu√°rios (apenas para admins)
export const getUsers = async (organizationId?: string) => {
    try {
        const params = organizationId ? { organizationId } : {};
        const response = await api.get('/auth/users', { params });
        return response.data;
    } catch (error) {
        console.error('Erro ao buscar usu√°rios:', error);
        throw error;
    }
};

// Fun√ß√£o para obter usu√°rio por ID
export const getUserById = async (userId: string) => {
    try {
        const response = await api.get(`/auth/users/${userId}`);
        return response.data;
    } catch (error) {
        console.error('Erro ao buscar usu√°rio:', error);
        throw error;
    }
};

// Fun√ß√£o para atualizar usu√°rio
export const updateUser = async (userId: string, userData: Partial<UserData>) => {
    try {
        const response = await api.put(`/auth/users/${userId}`, userData);
        return response.data;
    } catch (error) {
        console.error('Erro ao atualizar usu√°rio:', error);
        throw error;
    }
};

// Fun√ß√£o para solicitar recupera√ß√£o de senha
export const forgotPassword = async (email: string) => {
    try {
        const response = await api.post('/auth/forgot-password', { email });
        return response.data;
    } catch (error) {
        console.error('Erro ao solicitar recupera√ß√£o de senha:', error);
        throw error;
    }
};

// Fun√ß√£o para redefinir senha
export const resetPassword = async (token: string, password: string) => {
    try {
        const response = await api.post('/auth/reset-password', { token, password });
        return response.data;
    } catch (error) {
        console.error('Erro ao redefinir senha:', error);
        throw error;
    }
};

// Fun√ß√£o para deletar usu√°rio
export const deleteUser = async (userId: string) => {
    try {
        const response = await api.delete(`/auth/users/${userId}`);
        return response.data;
    } catch (error) {
        console.error('Erro ao deletar usu√°rio:', error);
        throw error;
    }
};

// ========================================
// SISTEMA DE PERMISS√ïES GRANULARES
// ========================================

// Fun√ß√£o para listar todas as permiss√µes dispon√≠veis no sistema
export const getAllPermissions = async (): Promise<Permission[]> => {
    try {
        const response = await api.get<Permission[]>('/auth/permissions');
        return response.data;
    } catch (error) {
        console.error('Erro ao buscar todas as permiss√µes:', error);
        throw error;
    }
};

// Fun√ß√£o para obter permiss√µes de um usu√°rio espec√≠fico
export const getUserPermissions = async (userId: string): Promise<UserPermissions> => {
    try {
        const response = await api.get<UserPermissions>(`/auth/users/${userId}/permissions`);
        return response.data;
    } catch (error) {
        console.error('Erro ao buscar permiss√µes do usu√°rio:', error);
        throw error;
    }
};

// Fun√ß√£o para adicionar permiss√µes espec√≠ficas a um usu√°rio
export const addUserPermissions = async (userId: string, permissionIds: number[]): Promise<AddPermissionsResponse> => {
    try {
        const response = await api.post<AddPermissionsResponse>(`/auth/users/${userId}/permissions`, {
            permissionIds
        });
        return response.data;
    } catch (error) {
        console.error('Erro ao adicionar permiss√µes ao usu√°rio:', error);
        throw error;
    }
};

// Fun√ß√£o para remover permiss√µes espec√≠ficas de um usu√°rio
export const removeUserPermissions = async (userId: string, permissionIds: number[]): Promise<RemovePermissionsResponse> => {
    try {
        const response = await api.delete<RemovePermissionsResponse>(`/auth/users/${userId}/permissions`, {
            data: { permissionIds }
        });
        return response.data;
    } catch (error) {
        console.error('Erro ao remover permiss√µes do usu√°rio:', error);
        throw error;
    }
};

// Fun√ß√£o para configurar permiss√µes padr√£o do sistema (apenas SUPER_ADMIN)
export const setupSystemPermissions = async (): Promise<SetupPermissionsResponse> => {
    try {
        const response = await api.post<SetupPermissionsResponse>('/auth/setup-permissions');
        return response.data;
    } catch (error) {
        console.error('Erro ao configurar permiss√µes do sistema:', error);
        throw error;
    }
};

// Fun√ß√£o helper para verificar se usu√°rio tem uma permiss√£o espec√≠fica
export const hasPermission = (userPermissions: UserPermissions | null, action: string, resource: string): boolean => {
    if (!userPermissions) return false;
    
    // SUPER_ADMIN tem acesso total (bypass)
    if (userPermissions.role === 'SUPER_ADMIN') {
        return true;
    }
    
    // Verificar se existe a permiss√£o nas permiss√µes combinadas
    return userPermissions.allPermissions.some(
        permission => permission.action === action && permission.resource === resource
    );
};

// Fun√ß√£o helper para verificar se usu√°rio tem permiss√£o de MANAGE em um recurso
export const hasManagePermission = (userPermissions: UserPermissions | null, resource: string): boolean => {
    return hasPermission(userPermissions, 'MANAGE', resource);
};

// Fun√ß√£o helper para verificar se usu√°rio tem permiss√£o de READ em um recurso
export const hasReadPermission = (userPermissions: UserPermissions | null, resource: string): boolean => {
    return hasPermission(userPermissions, 'READ', resource);
};

// Fun√ß√£o helper para verificar se usu√°rio tem permiss√£o de CREATE em um recurso
export const hasCreatePermission = (userPermissions: UserPermissions | null, resource: string): boolean => {
    return hasPermission(userPermissions, 'CREATE', resource);
};

// Fun√ß√£o helper para verificar se usu√°rio tem permiss√£o de UPDATE em um recurso
export const hasUpdatePermission = (userPermissions: UserPermissions | null, resource: string): boolean => {
    return hasPermission(userPermissions, 'UPDATE', resource);
};

// Fun√ß√£o helper para verificar se usu√°rio tem permiss√£o de DELETE em um recurso
export const hasDeletePermission = (userPermissions: UserPermissions | null, resource: string): boolean => {
    return hasPermission(userPermissions, 'DELETE', resource);
};

// Fun√ß√£o utilit√°ria para debug - mostra todos os dados salvos
export const debugAuthData = () => {
    console.log('=== DEBUG - DADOS DE AUTENTICA√á√ÉO ===');
    
    const token = Cookies.get("jwtToken");
    const user = Cookies.get("user");
    const userId = Cookies.get("userId");
    const userRole = Cookies.get("USER_ROLE");
    
    console.log('Token JWT:', token ? token.substring(0, 50) + "..." : 'N√£o encontrado');
    console.log('User ID:', userId);
    console.log('User Role:', userRole);
    
    if (user) {
        try {
            const userData = JSON.parse(user);
            console.log('Dados do usu√°rio:', userData);
        } catch (e) {
            console.log('Erro ao parsear dados do usu√°rio:', user);
        }
    } else {
        console.log('Dados do usu√°rio: N√£o encontrados');
    }
    
    if (token) {
        try {
            const decoded = jwtDecode(token);
            console.log('Token decodificado:', decoded);
        } catch (e) {
            console.log('Erro ao decodificar token:', e);
        }
    }
    
    console.log('=== FIM DEBUG ===');
};



